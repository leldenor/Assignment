@page "/Adults"
@using Assignment.Models
@using Assignment.Data
@using Microsoft.AspNetCore.Mvc.Filters
@using Microsoft.AspNetCore.Mvc.Formatters
@inject IFamilyService FamilyService
@inject NavigationManager NavigationManager
<h3>Adults</h3>
@if (!authenticated)
{
    <p>To access information please Log in</p>
    <a href="" @onclick="Login">Login</a>
}
<AuthorizeView Policy="LoggedIn">
<p>
    Filter by First name: <input type="text" @oninput="@((arg)=>Filter(arg))" style="width: 100px"/>
</p>

@if (adultsToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!adultsToShow.Any())
{
    <p>
        <em>No Adults are added. Please add some.</em>
    </p>
}
else
{
    
    <table class="table">
        <thead>
        <tr>
            <th></th>
            <th>ID</th>
            <th>First name</th>
            <th>Last name</th>
            <th>Job title</th>
            <th>Hair color</th>
            <th>Eye color</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in adultsToShow)
        {
            <tr>
                <td>
                    <button @onclick="@(() => RemoveAdult(item.Id))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.JobTitle</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>
            </tr>
        }
        </tbody>
    </table>
    
}</AuthorizeView>

@code {
    private IList<Adult> allAdults;
    private IList<Adult> adultsToShow;
    private bool authenticated { get; set; }
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthStat).User;
        if (!user.Identity.IsAuthenticated)
        {
            authenticated = false;
        }
        else
        {
            authenticated = true;
        }
        allAdults = FamilyService.GetAdults();
        adultsToShow = allAdults;
    }

    private void RemoveAdult(int adultId)
    {
        Adult adultToRemove = allAdults.First(a => a.Id == adultId);
        FamilyService.RemoveAdult(adultId);
        allAdults.Remove(adultToRemove);
    }

    private void Filter(ChangeEventArgs changeEventArgs)
    {
        string filterByName = null;
        try
        {
            filterByName = changeEventArgs.Value.ToString();
        }catch(Exception e){}
        if (filterByName != null)
        {
            adultsToShow = allAdults.Where(a => a.FirstName.Equals(filterByName)).ToList();
        }
        else
        {
            adultsToShow = allAdults;
        }
    }

    private void Login()
    {
        NavigationManager.NavigateTo("/Security");
    }

}